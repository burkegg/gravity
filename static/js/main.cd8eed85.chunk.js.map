{"version":3,"sources":["Balls.js","RightSide.js","GravCanvas.js","GravitySim.js","App.js","reportWebVitals.js","index.js"],"names":["Vector","require","Balls","G","addBall","ballData","pos","x","y","vel","Vx","Vy","mass","color","ballsList","push","getBalls","getColors","colors","editBallLocation","idx","locData","data","editBallVelocity","initPos","ballDataVector","subtract","getLatestData","hist","locHistory","latestData","forEach","trajectory","length","resetBallLocations","changeMass","newMass","console","log","getDataToAnimate","timestep","Error","correctNumber","getInfo","numBalls","ballNum","manageBalls","window","setInterval","ball","i","moveBall","moveAllBallSteps","allBallData","moveBallSteps","clearBallsList","iterateEachInTurn","step","tempOneBallData","applyForce","currVel","currPos","copy","f","calcNetForce","f2","massVect","a","divide","multiplyScalar","sizeTimestep","newVel","newPos","add","deltaPos","updateHistory","info","netForce","dataIdx","f2Add","calcOneForce","gravConstant","numTimesteps","currTimestep","ballData1","ballData2","s2","distanceSq","b2Copy","fVector","normalize","this","RightSide","props","animationInfo","buttonStyle","height","fontSize","borderStyle","borderColor","marginBottom","id","style","display","flexDirection","marginLeft","htmlFor","name","onChange","selectNumberBalls","disabled","running","value","className","onClick","startHandler","reset","type","toggleTraces","width","map","ballInfo","marginTop","handleChangeMass","min","max","placeholder","textAlign","position","bottom","GravCanvas","drawArrows","ctx","canvasRef","current","getContext","locations","location","Math","sqrt","save","translate","rotate","angleBetweenPoints","PI","p","Path2D","moveTo","lineTo","closePath","stroke","fill","arrows","restore","V","atan2","addBallEventListeners","canvas","allowDragging","ballLocs","addEventListener","e","preventDefault","stopPropagation","arrow","isPointInPath","offsetX","offsetY","arrowDetectSelect","setState","draggingVectorIdx","isVectorDragging","circles","circle","isDragging","whichBall","state","mouseInfo","getMousePos","handleDragDrop","handleVectorDrag","showBall","m","r","arc","round","fillStyle","backGround","clearRect","listeners","dragOk","receivedLocs","React","createRef","document","getElementById","clientWidth","clientHeight","traces","evt","rect","getBoundingClientRect","clientX","left","clientY","top","ref","border","backgroundColor","Component","GravitySim","updateAnimationState","balls","rAF","requestAnimationFrame","b","target","setInitBallInfoState","stopStart","initPositions","resetPositionsToInit","valueAsNumber","parseInt","showTraces","cancelAnimationFrame","Fragment","handleVectorDown","App","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cd8eed85.chunk.js","sourcesContent":["let Vector = require('victor');\n/*\n  Stores x, v, a, m data for all balls\n */\n\nexport class Balls {\n  constructor(G) {\n    this.ballsList = []\n    this.G = G\n    this.locHistory = [] // [ [{pos: pos, vel: vel}, {pos: pos, vel: vel}], ...]\n    this.currTimestep = 0\n    this.numTimesteps = 0\n    this.sizeTimestep = .00005\n  }\n\n  addBall = (ballData) => {\n    // ballData as:  {x: initX, y: initY, Vx: initVx, Vy: initVy, mass: m}\n    // Take in data and make appropriate vectors.\n    // Store as: {pos: vector, vel: vector, mass: m}\n    // update locHistory with new array to push location data for this ball\n    let pos = new Vector(ballData.x, ballData.y)\n    let vel = new Vector(ballData.Vx, ballData.Vy)\n    ballData = {pos: pos, vel: vel, mass: ballData.mass, color: ballData.color}\n    this.ballsList.push(ballData)\n    // this.locHistory.push([{pos: pos, vel: vel, mass: ballData.mass}])\n  }\n\n  getBalls = () => {\n    return [...this.ballsList]\n  }\n\n  getColors = () => {\n    return [...this.colors]\n  }\n\n  editBallLocation = (idx, locData) => {\n    let data = this.ballsList[idx]\n    if (data.pos) {\n      data.pos.x = locData.x\n      data.pos.y = locData.y\n    }\n  }\n\n  editBallVelocity = (idx, ballData) => {\n    if (ballData) {\n      let data = this.ballsList[idx]\n      // ballData = { x: ###, y: ### }\n      // Get the new length of the vector and set that as V, and save Vx and Vy components\n      let initVelx = data.vel.x\n      let initVely = data.vel.y\n\n      let initPositionX = data.pos.x\n      let initPositionY = data.pos.y\n      let initPos = new Vector(data.pos.x, data.pos.y)\n      let ballDataVector = new Vector(ballData.x, ballData.y)\n\n      ballDataVector.subtract(initPos)\n      data.vel.x = ballDataVector.x\n      data.vel.y = ballDataVector.y\n    }\n  }\n\n  getLatestData = () => {\n    // given an index, return the positions of all the balls at that index\n    let hist = this.locHistory\n    let latestData = []\n    hist.forEach((trajectory, idx) => {\n      latestData.push(trajectory[trajectory.length - 1])\n    })\n    return latestData\n  }\n\n  resetBallLocations = data => {\n    this.ballsList = [...data]\n  }\n\n  changeMass = (newMass, idx) => {\n    console.log('balls', this.ballsList, idx)\n    this.ballsList[idx].mass = newMass\n  }\n\n  getDataToAnimate = (timestep) => {\n\n    let hist = this.locHistory\n    if (timestep < 0) {\n      throw new Error(\"You went below zero\")\n    }\n    let data = []\n    let correctNumber = this.getInfo().numBalls\n    for (let ballNum = 0; ballNum < correctNumber; ballNum++) {\n      if (!hist[ballNum][timestep] || !hist[ballNum][timestep].pos) {\n        timestep = hist[1].length - 1\n      }\n      data.push(hist[ballNum][timestep])\n    }\n    return data\n  }\n\n  manageBalls = () => {\n    /*\n      delta T, get new loc.\n     */\n    window.setInterval(()=>{\n      let balls = this.ballsList\n      balls.forEach((ball, idx) => {\n        // calc force, then do the math for that ball to update its position and velocity\n        for (let i = 0; i < 5000; i++) {\n          this.moveBall(idx)\n        }\n      })\n    }, 5000)\n  }\n\n  moveAllBallSteps = () => {\n    let allBallData = []\n    this.ballsList.forEach((ball, ballNum) => {\n      let ballData = this.moveBallSteps(ballNum)\n      allBallData.push(ballData)\n    })\n    return allBallData\n  }\n\n  clearBallsList = () => {\n    this.ballsList = []\n  }\n\n  moveBallSteps = (ballNum) => {\n    let iterateEachInTurn = []\n    for (let step = 0; step < 1000; step++) {\n      this.ballsList.forEach((ball, ballNum) => {\n        let tempOneBallData = this.applyForce(ballNum)\n        iterateEachInTurn[ballNum] = tempOneBallData\n      })\n    }\n    // TODO:  put the current position into the balls in ballsList and everything uses that\n    return iterateEachInTurn\n  }\n\n  applyForce = (idx) => {\n    let ballData = this.ballsList\n    let currVel = new Vector(0, 0)\n    let currPos = new Vector(0, 0)\n\n    currVel.copy(ballData[idx].vel)\n    currPos.copy(ballData[idx].pos)\n    let color = ballData[idx].color\n    let mass = ballData[idx].mass\n    let f = this.calcNetForce(idx)\n    let f2 = new Vector(0,0)\n    f2.copy(f)\n    let massVect = new Vector(mass, mass)\n    let a = f2.divide(massVect)\n    a.multiplyScalar(this.sizeTimestep)\n    // create new vel and pos vectors and push them into history\n    let newVel  = new Vector(currVel.x, currVel.y)\n    let newPos = new Vector(ballData[idx].pos.x, ballData[idx].pos.y)\n    /*\n    a = vf - vo / t\n    vf = at + vo\n     */\n    newVel.add(a)\n    let deltaPos = new Vector(newVel.x, newVel.y)\n    deltaPos.multiplyScalar(this.sizeTimestep)\n\n    // newVel.multiplyScalar(.5)\n    /*\n    v = xf - xo / t\n    xf = vt + xo\n     */\n    newPos.add(deltaPos)\n    // never added the data to the history?\n    let data = {pos: newPos, vel: newVel, mass: mass, color: color}\n    this.ballsList[idx] = data\n    return data\n  }\n\n  updateHistory = (idx, data) => {\n    this.locHistory[idx].push(data)\n  }\n\n  calcNetForce = (idx) => {\n    // add a row to the history\n    let info = this.ballsList\n    // let info = []\n    // this.ballsList.forEach(ballHistory => {\n    //   info.push(ballHistory[ballHistory.length - 1])\n    // })\n    // info is the current state of all balls\n\n    let netForce = new Vector(0,0)\n\n    info.forEach((ballData, dataIdx) => {\n      if (idx !== dataIdx) {\n        let f2Add = this.calcOneForce(info[idx], info[dataIdx])\n        netForce.add(f2Add)\n      }\n    })\n    return netForce\n  }\n\n\n  getInfo = () => {\n    return { gravConstant: this.G, numBalls: this.ballsList.length, numTimesteps: this.numTimesteps, sizeTimestep: this.sizeTimestep, currTimestep: this.currTimestep }\n  }\n\n  calcOneForce = (ballData1, ballData2) => {\n    // given which ball (e.g. ball1, ball2....) by index (0, 1, 2...)\n    // so we can get their mass and maybe look up other properties later if we need.\n    let s2 = ballData1.pos.distanceSq(ballData2.pos)\n\n    let f = (this.G * ballData1.mass * ballData2.mass) / (s2 + 0.2 * s2)\n    if (s2 < 5) {\n      f = 0\n    }\n    let b2Copy = {}\n    b2Copy.pos = new Vector(0,0)\n    b2Copy.pos.copy(ballData2.pos)\n    let fVector = b2Copy.pos.subtract(ballData1.pos)\n    fVector.normalize()\n    fVector.multiplyScalar(f)\n    return fVector\n  }\n}\n","import React from 'react'\nconst RightSide = props => {\n  const { animationInfo } = props\n  let buttonStyle = {height: 30, fontSize: 20, borderStyle: 'solid', borderColor: 'black', marginBottom: 15}\n  return (\n    <div id='rightSide' style={{ display: 'flex', flexDirection: 'column', marginLeft: 15}}>\n      <h2 id='rightSideHeader'>\n        Set up Sim\n      </h2>\n      <div id='addRemoveButtons' style={{ display: 'flex', flexDirection: 'column' }}>\n        <label htmlFor=\"numBallSelect\" style={{marginBottom: 5}}>Select number of objects:</label>\n\n        <select\n          name=\"Number\"\n          id=\"numBallSelect\"\n          onChange={props.selectNumberBalls}\n          disabled={props.running}\n          style={{marginBottom: 15, height: 30, fontSize: 20}}\n        >\n          <option value='select...'>Select...</option>\n          <option value='1'>One</option>\n          <option value=\"2\">Two</option>\n          <option value=\"3\">Three</option>\n          <option value=\"4\">Four</option>\n        </select>\n        <button\n          className='ballsButton'\n          onClick={props.startHandler}\n          disabled={!props.animationInfo.length}\n          style={buttonStyle}\n        >\n          {props.running ? \"Stop\" : \"Start\"}\n        </button>\n        <button\n          className='ballsButton'\n          onClick={props.reset}\n          disabled={props.running}\n          style={buttonStyle}>\n          Reset\n        </button>\n        <div>\n        <input type='checkbox' id='traceBox' name='traceBox' value='traces' onChange={props.toggleTraces} style={{width: 20, height: 20}}/>\n          <label htmlFor='traceBox'>Show Traces</label>\n        </div>\n        <div id='mass-section'>\n          {props.animationInfo.map((ballInfo, idx) => {\n            return(\n              <div key={`$mass${idx}key`}>\n                <div style={{marginTop: 20, fontSize: 16, marginBottom: 5}}>\n                  <label htmlFor={`mass${idx}`} >Mass for object {idx + 1}</label>\n                </div>\n                <div style={{marginBottom: 20}}>\n                  <input onChange={props.handleChangeMass} type=\"number\" id={`massEntry${idx}`} name={`${idx}`}\n                         min=\"1\" max=\"1000\" placeholder={`${ballInfo.mass}`} style={{width: 100, height: 30, fontSize: 17, textAlign: 'center'}}/>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n      <div style={{position: 'absolute', bottom: 100, width: 200}}>\n        Drag masses and vectors to edit starting conditions.\n      </div>\n    </div>\n\n  )\n}\n\nexport default RightSide\n","import React from 'react'\n\nclass GravCanvas extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      listeners: [],\n      isDragging: false,\n      whichBall: null,\n      dragOk: false,\n      receivedLocs: false,\n\n    }\n    this.canvasRef = React.createRef();\n    this.circles = []\n    this.arrows = []\n    this.ballLocs = []\n  }\n\n  componentDidMount() {\n    this.canvasRef.current.width = document.getElementById('canvasContainer').clientWidth * 0.8\n    this.canvasRef.current.height = document.getElementById('canvasContainer').clientHeight\n    // this.addBallEventListeners()\n  }\n\n  componentDidUpdate() {\n    const { locations } = this.props\n\n    this.ballLocs = [...locations]\n    const canvas = this.canvasRef.current\n    if (!this.props.traces) {\n      this.backGround()\n    }\n    locations.forEach((ball, idx) => {\n      this.showBall(ball.pos.x, ball.pos.y, ball.mass, idx, ball.color)\n    })\n    this.drawArrows()\n    if (locations.length && !this.state.receivedLocs) {\n      this.setState({receivedLocs: true}, () => {\n        this.addBallEventListeners()\n      })\n    }\n  }\n\n  drawArrows = () => {\n    // Maybe if I can return the arrows themselves?  I think I need to be able to test against the context when\n    // things have been rotated and translated - which isn't the ctx when we're doing the test.\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const { running, locations } = this.props\n    let width = 10\n    if (!running) {\n      locations.forEach((location, idx) => {\n        let height = Math.sqrt(location.vel.x ** 2 + location.vel.y ** 2)\n        let pos = location.pos\n        let vel = location.vel\n        ctx.save()\n        ctx.translate(pos.x, pos.y)\n        ctx.rotate(this.angleBetweenPoints(vel) * Math.PI / 180)\n        ctx.translate(-pos.x, -pos.y)\n        let p = new Path2D()\n        p.moveTo(-width / 2 + pos.x, 0 + pos.y + 5)\n        p.lineTo(width / 2 + pos.x, 0 + pos.y + 5)\n        p.lineTo(width / 2 + pos.x,height + pos.y+ 5)\n        p.lineTo(width / 2 +10 + pos.x, height + pos.y+5)\n        p.lineTo(0 + pos.x, height + 20 + pos.y+5)\n        p.lineTo(0 - width / 2 - 10 + pos.x, height + pos.y+5)\n        p.lineTo(-width / 2 + pos.x, height + pos.y+5)\n        p.closePath()\n        ctx.stroke(p)\n        ctx.fill(p)\n        this.arrows[idx] = p\n        ctx.restore()\n      })\n    }\n  }\n\n  angleBetweenPoints = (V) => {\n    // Canvas uses a different rotation about origin\n    return Math.atan2(V.y, V.x) * 180 / Math.PI - 90;\n  }\n\n  addBallEventListeners = () => {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const { running, allowDragging } = this.props\n    let locations = this.ballLocs\n\n    let arrowDetectSelect = (location, idx, e) => {\n      // Takes in locations of the balls and changes the context to the appropriately translated / rotated one\n      // before looking at collision detection\n      let arrow = this.arrows[idx]\n      let pos = location.pos\n      let vel = location.vel\n      // The arrows don't know their own canvas context (translate, rotate, etc)\n      ctx.save()\n      ctx.translate(pos.x, pos.y)\n      ctx.rotate(this.angleBetweenPoints(vel) * Math.PI / 180)\n      ctx.translate(-pos.x, -pos.y)\n      if (ctx.isPointInPath(arrow, e.offsetX, e.offsetY)) {\n        ctx.restore()\n        return true\n      }\n      ctx.restore()\n      return false\n    }\n\n\n    let handleMouseDown = (e) => {\n      if (running) {\n        return\n      }\n      e.preventDefault();\n      e.stopPropagation();\n\n      locations.forEach((location, idx) => {\n        // Edit the context here and wrap the test in context switch - then return to normal after\n        if (arrowDetectSelect(location, idx, e)) {\n          this.setState({draggingVectorIdx: idx, isVectorDragging: true,})\n        }\n      })\n\n      // See if we're inside any circles:\n      this.circles.forEach((circle, idx) => {\n        if (ctx.isPointInPath(circle, e.offsetX, e.offsetY)) {\n          this.setState({isDragging: true, whichBall: idx})\n        }\n      })\n    }\n\n    let handleMouseUp = (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setState({isDragging: false, whichBall: null, isVectorDragging: false, draggingVectorIdx: null})\n    }\n\n    let handleMouseMove = (e) => {\n      if (!running && this.state.isDragging) {\n        e.preventDefault();\n        e.stopPropagation();\n        let mouseInfo = this.getMousePos(e)\n        this.props.handleDragDrop(mouseInfo, this.state.whichBall)\n      } else if (!running && this.state.isVectorDragging) {\n        let mouseInfo = this.getMousePos(e)\n        this.props.handleVectorDrag(mouseInfo, this.state.draggingVectorIdx)\n      }\n    }\n    if (!running && allowDragging) {\n      canvas.addEventListener('mousedown', handleMouseDown)\n      canvas.addEventListener('mouseup', handleMouseUp)\n      canvas.addEventListener('mousemove', handleMouseMove)\n    }\n  }\n\n  showBall = (x, y, m, idx, color) => {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    // Create circle\n    const circle = new Path2D();\n    let r\n    if (m > 800) {\n      r = 15\n    } else if (m > 600) {\n      r = 12\n    } else if (m > 400) {\n      r = 10\n    } else if (m > 100) {\n      r = 8\n    } else {\n      r = 6\n    }\n    circle.arc(Math.round(x), Math.round(y), r, 0, 2 * Math.PI);\n    ctx.fillStyle = color;\n    ctx.fill(circle);\n    this.circles[idx] = circle\n  }\n\n  getMousePos(evt) {\n    const canvas = this.canvasRef.current;\n    var rect = canvas.getBoundingClientRect();\n    return {\n      x: evt.clientX - rect.left,\n      y: evt.clientY - rect.top\n    };\n  }\n\n  backGround = () => {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  }\n  render() {\n    return (\n      <canvas ref={this.canvasRef} style={{border:1, borderStyle: \"solid\", backgroundColor: 'MidnightBlue'}}/>\n    )\n  }\n}\n\nexport default GravCanvas\n","import React from 'react'\n\nimport {Balls} from './Balls'\nimport RightSide from \"./RightSide\";\nimport GravCanvas from './GravCanvas'\n\nclass GravitySim extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animationInfo: [],\n      running: false,\n      showTraces: false,\n      allowDragging: true,\n      isDragging: false,\n      initPositions: [],\n      draggingVectorIdx: false,\n      isVectorDragging: false,\n    }\n    this.balls = new Balls(400)\n  }\n  componentDidMount() {\n    this.rAF = requestAnimationFrame(this.updateAnimationState);\n  }\n  updateAnimationState = () => {\n    if (this.state.running) {\n      this.balls.ballsList.forEach((ball, idx) => {\n        let ballData = this.balls.moveBallSteps()\n        this.setState({animationInfo: ballData})\n      })\n    }\n    this.rAF = requestAnimationFrame(this.updateAnimationState);\n  }\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rAF);\n  }\n\n  selectNumberBalls = (e) => {\n    let b = this.balls\n    b.clearBallsList()\n    switch (e.target.value) {\n      case '1':\n        b.addBall({x: 500, y: 500, Vx: 0, Vy: 1, mass: 1000, color: 'yellow'})\n        break;\n      case '2':\n        b.addBall({x: 500, y: 500, Vx: 0, Vy: -20, mass: 1000, color: 'yellow'})\n        b.addBall({x: 50, y: 500, Vx: 0, Vy: -25, mass: 20, color: 'aqua'})\n        break;\n      case '3':\n        b.addBall({x: 500, y: 500, Vx: 0, Vy: 1, mass: 1000, color: 'yellow'})\n        b.addBall({x: 870, y: 500, Vx: 0, Vy: -25, mass: 20, color: 'aqua'})\n        b.addBall({x: 890, y: 500, Vx: 0, Vy: -10, mass: 1, color: 'springGreen'})\n        break;\n      case '4':\n        b.addBall({x: 500, y: 500, Vx: 0, Vy: 1, mass: 1000, color: 'yellow'})\n        b.addBall({x: 870, y: 500, Vx: 0, Vy: -25, mass: 20, color: 'aqua'})\n        b.addBall({x: 890, y: 500, Vx: 0, Vy: -10, mass: 1, color: 'springGreen'})\n        b.addBall({x: 250, y: 200, Vx: 5, Vy: 5, mass: 1, color: 'red'})\n        break;\n    }\n    this.setInitBallInfoState()\n  }\n  stopStart = (e) => {\n    this.setState({running: !this.state.running})\n  }\n\n  handleDragDrop = (e, idx) => {\n    this.setState({allowDragging: false})\n    let ballData = this.state.animationInfo[idx]\n    this.balls.editBallLocation(idx, e)\n    let data = this.balls.getBalls()\n    this.setState({animationInfo: data, initPositions: [...data]})\n    this.setInitBallInfoState()\n  }\n\n  handleVectorDrag = (e, idx) => {\n    this.setState({ allowDragging: false })\n    this.balls.editBallVelocity(idx, e)\n    let data = this.balls.getBalls()\n    this.setState({ animationInfo: data, initPositions: [...data]})\n  }\n\n  resetPositionsToInit = () => {\n    this.balls.resetBallLocations(this.state.initPositions)\n    this.setState({animationInfo: [...this.state.initPositions]})\n  }\n\n  setInitBallInfoState = () => {\n    let data = this.balls.getBalls()\n    this.setState({animationInfo: data, initPositions: [...data]})\n  }\n  toggleTraces = (e) => {\n    this.setState({traces: !this.state.traces})\n  }\n  handleChangeMass = (e) => {\n    let newMass = e.target.valueAsNumber\n    let idx = parseInt(e.target.id[e.target.id.length - 1])\n    if ( typeof newMass === 'number' && newMass > 0) {\n      this.balls.changeMass(newMass, idx)\n      let data = this.balls.getBalls()\n      this.setState({ animationInfo: data, initPositions: [...data]})\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GravCanvas\n          locations={this.state.animationInfo}\n          running={this.state.running}\n          traces={this.state.traces}\n          allowDragging={this.state.allowDragging}\n          handleDragDrop={this.handleDragDrop}\n          handleVectorDrag={this.handleVectorDrag}\n          handleVectorDown={this.handleVectorDown}/>\n        <RightSide\n          running={this.state.running}\n          startHandler={this.stopStart}\n          selectNumberBalls={this.selectNumberBalls}\n          animationInfo={this.state.animationInfo}\n          toggleTraces={this.toggleTraces}\n          reset={this.resetPositionsToInit}\n          handleChangeMass={this.handleChangeMass}/>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GravitySim\n","import Canvas from \"./GravitySim\";\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\" style={{display: 'flex', flexDirection: 'row', height: '98vh'}}>\n      <div id='canvasContainer' style={{ display: 'flex', flexDirection: 'row', width: '100%', marginTop: 10, marginLeft: 10, marginBottom: 10, minHeight: '100%'}}>\n        <Canvas/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}