{"version":3,"sources":["../webpack/bootstrap","calc.worker.js","../node_modules/victor/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","self","addEventListener","event","sizeTimestep","initDataNeedsVectors","initData","dataToWrite","running","data","type","info","applyForce","ballData","f","calcNetForce","ballIdx","massVect","Vector","mass","divide","multiplyScalar","newVel","vel","x","y","newPos","pos","add","deltaPos","color","idx","netForce","forEach","dataIdx","f2Add","ballData1","ballData2","s2","distanceSq","b2Copy","copy","fVector","subtract","normalize","calcOneForce","startCalcs","step","tempData","ball","ballNum","tempOneBallData","this","postMessage","animationInfo","map","setInterval","Victor","fromArray","arr","fromObject","obj","addX","vec","addY","addScalar","scalar","addScalarX","addScalarY","subtractX","subtractY","subtractScalar","subtractScalarX","subtractScalarY","divideX","vector","divideY","divideScalar","divideScalarX","divideScalarY","invertX","invertY","invert","multiplyX","multiplyY","multiply","multiplyScalarX","multiplyScalarY","length","norm","limit","max","factor","Math","abs","randomize","topLeft","bottomRight","randomizeX","randomizeY","min","random","randomizeAny","round","unfloat","toFixed","precision","mixX","amount","mixY","mix","clone","copyX","copyY","zero","dot","vec2","cross","projectOnto","coeff","horizontalAngle","atan2","horizontalAngleDeg","radian2degrees","verticalAngle","verticalAngleDeg","angle","angleDeg","direction","rotate","nx","cos","sin","ny","rotateDeg","degrees2radian","rotateTo","rotation","rotateToDeg","rotateBy","rotateByDeg","distanceX","absDistanceX","distanceY","absDistanceY","distance","sqrt","dx","dy","lengthSq","magnitude","isZero","isEqualTo","toString","toArray","toObject","degrees","PI","floor","rad","deg"],"mappings":"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","file":"static/js/calc.worker.c00cd5d9.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/gravity/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// eslint-disable-next-line no-restricted-globals\nself.addEventListener(\"message\", handleMotion);\nlet Vector = require('victor');\n\n// expecting: event.data = {type: '\nfunction handleMotion(event) {\n  // eslint-disable-next-line no-restricted-globals\n\n  let sizeTimestep = 0.000015\n  let G = 400\n  // let initData = event.data\n  let initDataNeedsVectors = []\n  let initData = []\n\n\n  let dataToWrite = []\n  let running = false\n\n\n  if (event.data.type === 'running' && event.data.info === true) {\n    running = true\n  }\n\n  if (event.data.type === 'running' && event.data.info === false) {\n    running = false\n    initDataNeedsVectors = []\n    initData = []\n  }\n\n  const calcOneForce = (ballData1, ballData2) => {\n\n    // given which ball (e.g. ball1, ball2....) by index (0, 1, 2...)\n    // so we can get their mass and maybe look up other properties later if we need.\n    let s2 = ballData1.pos.distanceSq(ballData2.pos)\n\n    let f = (G * ballData1.mass * ballData2.mass) / (s2 + 0.2 * s2)\n    if (s2 < 5) {\n      f = 0\n    }\n    let b2Copy = {}\n    b2Copy.pos = new Vector(0,0)\n    b2Copy.pos.copy(ballData2.pos)\n    let fVector = b2Copy.pos.subtract(ballData1.pos)\n    fVector.normalize()\n    fVector.multiplyScalar(f)\n    return fVector\n  }\n\n  const applyForce = (ballData) => {\n    let f = calcNetForce(ballData.ballIdx)\n    let massVect = new Vector(ballData.mass, ballData.mass)\n    f.divide(massVect)\n    f.multiplyScalar(sizeTimestep)\n    // create new vel and pos vectors and push them into history\n    let newVel  = new Vector(ballData.vel.x, ballData.vel.y)\n    let newPos = new Vector(ballData.pos.x, ballData.pos.y)\n    /*\n    a = vf - vo / t\n    vf = at + vo\n     */\n\n    newVel.add(f)\n\n    let deltaPos = new Vector(newVel.x, newVel.y)\n    deltaPos.multiplyScalar(sizeTimestep)\n    /*\n    v = xf - xo / t\n    xf = vt + xo\n     */\n\n    newPos.add(deltaPos)\n    let data = {pos: newPos, vel: newVel, mass: ballData.mass, color: ballData.color, ballIdx: ballData.ballIdx}\n    return data\n  }\n\n  const calcNetForce = (idx) => {\n    // add a row to the history\n    // let info = initData\n    let netForce = new Vector(0,0)\n\n    initData.forEach((ballData, dataIdx) => {\n      if (idx !== dataIdx) {\n        let f2Add = calcOneForce(initData[idx], initData[dataIdx])\n        netForce.add(f2Add)\n      }\n    })\n    return netForce\n  }\n\n  const startCalcs = () => {\n    //   let startTime = performance.now();\n      for (let step = 0; step < 10000; step++) {\n        let tempData = []\n        initData.forEach((ball, ballNum) => {\n          let tempOneBallData = applyForce(ball)\n          tempData[ballNum] = tempOneBallData\n        })\n        dataToWrite = tempData\n        initData = tempData\n      }\n      // let endTime = performance.now();\n      // var timeDiff = endTime - startTime;\n      // console.log(timeDiff + \" ms\");\n\n      this.postMessage(dataToWrite)\n  }\n\n  if (running) {\n    initDataNeedsVectors = event.data.animationInfo\n    initData = initDataNeedsVectors.map(ballData => {\n      return {pos: new Vector(ballData.pos.x, ballData.pos.y), vel: new Vector(ballData.vel.x, ballData.vel.y), color: ballData.color, mass: ballData.mass, ballIdx: ballData.ballIdx}\n    })\n    this.setInterval(startCalcs, 20)\n  }\n\n\n}\n","exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n"],"sourceRoot":""}